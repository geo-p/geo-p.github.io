{"version":3,"sources":["component/ImageGridItem.js","view/NasaSearch.js","view/Collection.js","component/EditItemForm.js","view/MediaViewer.js","App.js","index.js"],"names":["DummyGridItems","map","i","className","key","ImageGridItem","state","loaded","img","document","createElement","src","this","props","data","previewUrl","addEventListener","setState","collectionActions","title","favorite","onClick","evt","preventDefault","onItemUpdate","icon","faHeart","onItemEdit","faPencilAlt","onItemRemove","faTrash","searchAction","onItemAdd","faPlus","collected","to","id","alt","attribution","date","description","isSearch","Component","NasaSearch","query","loadedQuery","items","onQueryChange","target","value","queryEncoded","encodeURIComponent","fetch","then","response","json","onResultsLoad","allItems","collection","filter","item","indexOf","media_type","nasa_id","photographer","secondary_creator","center","Date","date_created","toLocaleDateString","year","month","day","type","links","length","href","mediaUrl","slice","searchState","searchInput","focus","onSearchUnmount","resultContent","gridItems","itemData","onSubmit","htmlFor","name","onChange","ref","input","React","Collection","list","EditItemForm","onFieldChange","bind","onFormSubmit","onClose","dangerouslySetInnerHTML","__html","faTimes","disabled","rows","faCheck","MediaViewer","mediaUrlList","loadMediaUrls","loadItemData","urls","history","goBack","media","controls","autoPlay","url","App","collectionJson","localStorage","getItem","JSON","parse","editingItem","onItemEditClose","push","updateCollection","removedItem","updatedItem","setItem","stringify","path","exact","render","match","params","find","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.b5f81477.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faHeart, faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport \"./ImageGridItem.scss\";\r\n\r\n/**\r\n * Grid item component, displays a single item from the image search API\r\n */\r\nexport class ImageGridItem extends Component {\r\n\r\n  state = {\r\n    loaded:false\r\n  }\r\n\r\n  componentDidMount() {\r\n    // listen for image loaded \r\n    const img = document.createElement(\"img\");\r\n    img.src = this.props.data.previewUrl;\r\n    img.addEventListener('load', () => {\r\n      this.setState({loaded: true});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    \r\n    // retrieve item data\r\n    const data = this.props.data;\r\n\r\n    // actions for when we display item in collection\r\n    const collectionActions = \r\n    <div className=\"item-actions\">\r\n      <button \r\n        title=\"Favorite\" \r\n        className={\"favorite\" + (data.favorite ? \" selected\" : \" not\")}\r\n        onClick={evt => {\r\n          evt.preventDefault();\r\n          data.favorite = !data.favorite;\r\n          this.props.onItemUpdate(data);\r\n        }}\r\n      >\r\n        <FontAwesomeIcon icon={ faHeart } />\r\n      </button>\r\n\r\n      <button \r\n        title=\"Edit\"\r\n        onClick={evt => {\r\n          evt.preventDefault();\r\n          this.props.onItemEdit(data)\r\n        }}\r\n      >\r\n        <FontAwesomeIcon icon={ faPencilAlt } />\r\n      </button>\r\n      \r\n      <button \r\n        title=\"Delete\" \r\n        onClick={evt => {\r\n          evt.preventDefault();\r\n          this.props.onItemRemove(data)\r\n        }}\r\n      >\r\n        <FontAwesomeIcon icon={ faTrash } />\r\n      </button>\r\n    </div>;\r\n\r\n    // action for when we display item in search results\r\n    const searchAction = \r\n    <button className=\"add\" onClick={evt => {\r\n      evt.preventDefault();\r\n      this.props.onItemAdd(data)\r\n    }}>\r\n      <FontAwesomeIcon icon={faPlus} /> { data.collected? \" Added to collection\" : \" Add to NASA Collection\" }\r\n    </button>;\r\n\r\n    return (\r\n      <Link to={'/media/' + data.id} className=\"ImageGridItem\">\r\n        <div className=\"item-content\">  \r\n\r\n          {/* thumbnail */}\r\n          <div className={'image-holder' + (this.state.loaded ? ' loaded' : '')}>\r\n            <img src={ data.previewUrl } alt={ data.title }></img>\r\n          </div>\r\n          \r\n          {/* image captions */}\r\n          <p className=\"image-caption\">\r\n            <span className=\"image-attribution\">{ data.attribution }</span>\r\n            <span className=\"image-date\">{ data.date }</span>\r\n          </p>\r\n          \r\n          {/* title / desc */}\r\n          <h2 className=\"item-title\" title={data.title}>{ data.title }</h2>\r\n          <p className=\"item-description\" title={data.description}>{ data.description }</p>\r\n        \r\n        </div>\r\n\r\n        {/* contextual actions */}\r\n        { this.props.isSearch ? searchAction : collectionActions }\r\n\r\n      </Link>\r\n    )\r\n  }\r\n}\r\n\r\nImageGridItem.propTypes = {\r\n  // item data\r\n  data: PropTypes.object.isRequired,\r\n  // list type\r\n  isSearch: PropTypes.bool,\r\n  // events\r\n  onItemAdd: PropTypes.func,\r\n  onItemRemove: PropTypes.func,\r\n  onItemEdit: PropTypes.func\r\n}\r\n\r\n/**\r\n * Dummy grid items used purely for fixing width of trailing items in flex layout\r\n */\r\nexport function DummyGridItems() {\r\n  return (\r\n    [1,2,3].map((i)=><div className=\"image-grid-filler\" key={i} />)\r\n  );\r\n}\r\n\r\nexport default ImageGridItem;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ImageGridItem, { DummyGridItems } from \"../component/ImageGridItem\";\r\nimport \"./NasaSearch.scss\";\r\n\r\n/**\r\n * Nasa image search screen displays results from Nasa's image API\r\n */\r\nclass NasaSearch extends React.Component {\r\n  \r\n  // initial state\r\n  state = {\r\n    query: \"\",\r\n    loadedQuery: \"\",\r\n    items: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    // resume last state\r\n    this.setState(this.props.searchState);\r\n    this.searchInput.focus(); \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onSearchUnmount(this.state);\r\n  }\r\n  \r\n  // query change handler\r\n  onQueryChange = (evt) => {\r\n    // retrieve query from input field\r\n    const query = evt.target.value;\r\n    // update state\r\n    this.setState({ query: query });\r\n\r\n    if(!query) {\r\n      // don't load empty queries\r\n      this.setState({ \r\n        items: []\r\n      });\r\n      return;\r\n    }\r\n\r\n    // encode query for use in URL\r\n    const queryEncoded = encodeURIComponent(evt.target.value);\r\n\r\n    // initiate request to API\r\n    fetch(`https://images-api.nasa.gov/search?q=${queryEncoded}`)\r\n      .then(response => response.json())\r\n      .then(json => this.onResultsLoad(json, query));\r\n  }\r\n\r\n  onResultsLoad = (json, query) => {\r\n\r\n    if(this.state.query !== query) {\r\n      // this is an outdated query - ignore\r\n      return;\r\n    }\r\n\r\n    // retrieve search results\r\n    const allItems = json.collection.items\r\n    // filter out non video or image results\r\n    .filter(item => [\"image\", \"video\"].indexOf(item.data[0].media_type) !== -1)\r\n    // parse individual item data\r\n    .map(item => {\r\n      const data = item.data[0];\r\n      return {\r\n        id: data.nasa_id,\r\n        collected: false,\r\n        title: data.title,\r\n        description: data.description,\r\n        // attribution has several fallbacks\r\n        attribution: data.photographer || data.secondary_creator || data.center,\r\n        // parse and format date\r\n        date: new Date(data.date_created).toLocaleDateString('en-GB', {year: 'numeric', month: 'short', day: 'numeric'}),\r\n        type: data.media_type,\r\n        previewUrl: item.links && item.links.length ? item.links[0].href : null,\r\n        mediaUrl: item.href,\r\n        favorite: false\r\n      }\r\n    });\r\n\r\n    // write results to state\r\n    this.setState({\r\n      items: allItems.slice(0, 18),\r\n      loadedQuery: query\r\n    });\r\n  }\r\n  \r\n  render() {\r\n\r\n    let resultContent;\r\n    const { query, loadedQuery, items } = this.state;\r\n    if(query && query === loadedQuery) {\r\n      if(items.length) {\r\n        // build grid of search results\r\n        const gridItems = items.map((itemData) => {\r\n          return <ImageGridItem \r\n            data={itemData} isSearch \r\n            key={itemData.id} \r\n            onItemAdd={this.props.onItemEdit}\r\n          />\r\n        })\r\n        resultContent = <div className=\"search-list\">\r\n          {gridItems}\r\n          <DummyGridItems />\r\n        </div>\r\n      }\r\n      else {\r\n        resultContent = <p>No results found</p>\r\n      }\r\n    }\r\n    else if(query) {\r\n      resultContent = <p>Loading...</p>\r\n    }\r\n\r\n    return (\r\n      <div className=\"NasaSearch\">\r\n        <Link to=\"/\">&lt; Back to Collection</Link>\r\n        <h1>Search from Nasa</h1>\r\n        <form onSubmit={evt => evt.preventDefault()}>\r\n          <label htmlFor=\"query\">Enter Your search</label>\r\n          <input type=\"text\" name=\"query\"\r\n                value={ query }\r\n                onChange={ this.onQueryChange }\r\n                ref={input => this.searchInput = input }>\r\n          </input>\r\n        </form>\r\n        {resultContent}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NasaSearch;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"./Collection.scss\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport ImageGridItem, { DummyGridItems } from '../component/ImageGridItem';\r\n\r\n/**\r\n * Collection screen displays user's current collection of images,\r\n * allowing list manipulaton and item viewing\r\n */\r\nclass Collection extends Component {\r\n\r\n  render() {\r\n\r\n    let list;\r\n    if(this.props.list.length > 0) {\r\n      // build list of items\r\n      list = <div className=\"collection-list\">\r\n        {this.props.list.map((item) =>  \r\n          <ImageGridItem \r\n            data={ item } key={ item.id }\r\n            onItemRemove={ this.props.onItemRemove }\r\n            onItemEdit={ this.props.onItemEdit }\r\n            onItemUpdate={ this.props.onItemUpdate }\r\n            />\r\n        )}\r\n        <DummyGridItems />\r\n      </div>\r\n    }\r\n    else {\r\n      // show empty list message\r\n      list = <p className=\"collection-empty\">Your collection is empty</p>;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"Collection\">\r\n        <header className=\"collection-header\">\r\n          <h1>Nasa Collection</h1>\r\n          <div>\r\n            <Link to=\"/nasa-search\" className=\"new-item-button\">\r\n              <FontAwesomeIcon icon={faPlus} /> Add new item\r\n            </Link>\r\n          </div>\r\n        </header>\r\n        { list }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Collection;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './EditItemForm.scss';\r\n\r\n/**\r\n * Pop up item data editor\r\n */\r\nexport default class EditItemForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      description: \"\",\r\n      type: \"\",\r\n      previewUrl: \"\",\r\n      mediaUrl: \"\"\r\n    };\r\n\r\n    this.onFieldChange = this.onFieldChange.bind(this);\r\n    this.onFormSubmit = this.onFormSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // init state with item data that was passed in \r\n    this.setState(this.props.item);\r\n  }\r\n\r\n  onFieldChange(evt) {\r\n    this.setState({\r\n      // store updates to whichever property was changed\r\n      [evt.target.name] : evt.target.value\r\n    });\r\n  }\r\n\r\n  onFormSubmit(evt) {\r\n    // stop form submitting to URL\r\n    evt.preventDefault();\r\n    // notify changes\r\n    this.state.collected ? this.props.onItemUpdate(this.state) : this.props.onItemAdd(this.state);\r\n    this.props.onClose();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"EditItemForm\">\r\n        <style dangerouslySetInnerHTML={{__html: `\r\n          body { \r\n            overflow: hidden;\r\n          }\r\n        `}}></style>\r\n        <div className=\"form-overlay\" onClick={ this.props.onClose } />\r\n        <div className=\"form-box\">\r\n        \r\n          <div className=\"form-header\">\r\n            <h3>{ this.state.collected ? \"Edit\" : \"Add item to collection\" }</h3>\r\n            <div><button onClick={ this.props.onClose }>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </button></div>\r\n          </div>\r\n          \r\n          <form disabled onSubmit={ this.onFormSubmit }>\r\n            <div>\r\n              <label htmlFor=\"title\">Title</label>\r\n              <input name=\"title\" type=\"text\" \r\n                value={ this.state.title } \r\n                onChange={ this.onFieldChange } />\r\n            </div>\r\n            \r\n            <div>\r\n              <label htmlFor=\"description\">Description</label>\r\n              <textarea name=\"description\" rows=\"5\" \r\n                value={ this.state.description } \r\n                onChange={ this.onFieldChange } />\r\n            </div>\r\n            \r\n            <div>\r\n              <label htmlFor=\"type\">Media type</label>\r\n              <select name=\"type\" \r\n                value={ this.state.type } \r\n                onChange={ this.onFieldChange }\r\n              >\r\n                <option value=\"video\">Video</option>\r\n                <option value=\"image\">Image</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div>\r\n              <label htmlFor=\"previewUrl\">Preview image URL</label>\r\n              <input name=\"previewUrl\" type=\"url\" \r\n                value={ this.state.previewUrl } \r\n                onChange={ this.onFieldChange } />\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"mediaUrl\">Media URL</label>\r\n              <input name=\"mediaUrl\" type=\"url\" \r\n                value={ this.state.mediaUrl } \r\n                onChange={ this.onFieldChange } />\r\n            </div> \r\n\r\n            <button type=\"submit\">\r\n              <FontAwesomeIcon icon={faCheck} /> { this.state.collected ? \" Save\" : \" Add to collection\" }\r\n            </button>\r\n          </form>\r\n        \r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './MediaViewer.scss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\n/**\r\n * The media viewer screen loads video / images based on provided json data or data URLs\r\n */\r\nexport class MediaViewer extends Component {\r\n\r\n  state = {\r\n    item: null,\r\n    mediaUrlList: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    if(this.props.item) {\r\n      // we have item data\r\n      this.setState({item: this.props.item},\r\n        () => this.loadMediaUrls());\r\n    }\r\n    else {\r\n      // must first load item data from API\r\n      this.loadItemData();\r\n    }\r\n  }\r\n\r\n  loadItemData() {\r\n    fetch(`https://images-api.nasa.gov/search?nasa_id=${this.props.id}`)\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        const item = json.collection.items[0];\r\n        this.setState({\r\n          item: {\r\n            title: item.data[0].title, \r\n            type: item.data[0].media_type,\r\n            mediaUrl: item.href\r\n          }\r\n        }, () => this.loadMediaUrls());\r\n      });\r\n  }\r\n\r\n  loadMediaUrls() {\r\n    fetch(this.state.item.mediaUrl)\r\n      .then(response => response.json())\r\n      .then(urls => {\r\n        this.setState({\r\n          mediaUrlList: urls\r\n        })\r\n      });\r\n  }\r\n\r\n  goBack() {\r\n    this.props.history.goBack();\r\n  }\r\n  \r\n  render() {\r\n\r\n    const {item, mediaUrlList} = this.state;\r\n    let media = <div className=\"media-loading\"><p>Loading...</p></div>;\r\n    if(this.state.mediaUrlList && this.state.mediaUrlList.length) {\r\n      switch(item.type) {\r\n        case \"video\": \r\n          media = <video controls autoPlay>\r\n            { mediaUrlList.map((url, i) => <source src={url} key={i}/>) }\r\n          </video>\r\n          break;\r\n\r\n        case \"image\":\r\n          media = <img src={ mediaUrlList[0] }/>\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"MediaViewer\">\r\n        \r\n        <div className=\"media-header\">\r\n          <h1>{ item ? item.title : \"Loading...\"}</h1>\r\n          <div><button onClick={ () => this.goBack() }>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </button></div>\r\n        </div>\r\n        \r\n        <div className=\"media-holder\">\r\n          { media }\r\n        </div>\r\n      \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MediaViewer","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport './App.scss';\nimport NasaSearch from './view/NasaSearch';\nimport Collection from './view/Collection';\nimport EditItemForm from './component/EditItemForm';\nimport { MediaViewer } from './view/MediaViewer';\n\n/**\n * Root application component\n */\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // retrieve current collection from localstorage\n    const collectionJson = localStorage.getItem(\"collection\");\n    \n    this.state = {\n      // item collection\n      collection: collectionJson ? JSON.parse(collectionJson) : [],\n      // currently editing item\n      editingItem: null,\n      // search state data\n      searchState: {}\n    };\n\n    this.onItemAdd = this.onItemAdd.bind(this);\n    this.onItemEdit = this.onItemEdit.bind(this);\n    this.onItemEditClose = this.onItemEditClose.bind(this);\n    this.onItemRemove = this.onItemRemove.bind(this);\n    this.onItemUpdate = this.onItemUpdate.bind(this);\n  }\n\n  /**\n   * Image item event handlers\n   */\n  onItemAdd(item) {\n    // it's collected\n    item.collected = true;\n    // add item to collection\n    const collection = this.state.collection;\n    collection.push(item);\n    // store result\n    this.updateCollection(collection);\n  }\n\n  onItemRemove(removedItem) {\n    // filter item from collection \n    const collection = this.state.collection.filter(item => {\n      return item.id !== removedItem.id;\n    });\n    // store result\n    this.updateCollection(collection);\n  }\n\n  onItemEdit(editingItem) {\n    // store item\n    this.setState({\n      editingItem: editingItem\n    });\n  }\n\n  onItemEditClose() {\n    // clear editing item\n    this.setState({\n      editingItem: null\n    })\n  }\n\n  onItemUpdate(updatedItem) {\n    // find and update item by ID\n    const collection = this.state.collection.map(item => item.id === updatedItem.id ? updatedItem : item);\n    // store result\n    this.updateCollection(collection);  \n  }\n\n  updateCollection(collection) {\n    // update state\n    this.setState({collection: collection});\n    // persist data\n    localStorage.setItem(\"collection\", JSON.stringify(collection));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        \n        {this.state.editingItem &&\n          // item editor active\n          <EditItemForm \n            item={ this.state.editingItem } \n            onItemUpdate={ this.onItemUpdate }\n            onItemAdd={ this.onItemAdd }\n            onClose={ this.onItemEditClose }\n          />\n        }\n\n        <Router>\n\n          {/* Collection screen (initial screen) */}\n          <Route  \n            path=\"/\" exact\n            render={() => \n              <Collection \n                list={ this.state.collection }\n                onItemRemove={ this.onItemRemove }\n                onItemEdit={ this.onItemEdit }\n                onItemUpdate={ this.onItemUpdate }\n              /> \n            } \n          />\n\n          {/* Search screen */}\n          <Route \n            path=\"/nasa-search\" \n            render={() => \n              <NasaSearch \n                searchState={ this.state.searchState }\n                onSearchUnmount={ searchState => this.setState({searchState:searchState}) }\n                onItemEdit={ this.onItemEdit }\n              /> \n            }\n          />\n\n          {/* Media viewer screen */}\n          <Route \n            path=\"/media/:id\" \n            render={({match, history}) => \n              <MediaViewer\n                history={ history }\n                id={ match.params.id }\n                item={ this.state.collection.find(item => item.id === match.params.id) }\n              />\n            }\n          />\n        </Router>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}